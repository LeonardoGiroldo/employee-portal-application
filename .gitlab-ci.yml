stages:
  - test
  - build
  - deploy staging
  - automated testing
  - deploy production

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/employee-image:$CI_COMMIT_REF_SLUG
  STAGING_APP: empl-portal-app-staging-1
  PRODUCTION_APP: emp-portal-prod-environment
  HEROKU_STAGING: "registry.heroku.com/$STAGING_APP/web"
  HEROKU_PRODUCTION: "registry.heroku.com/$PRODUCTION_APP/web"

#The lint test checks the quality of our code, such as, wrong indentation, libraries not being used but in the code, etc.
lint_test:
  image: python:3.8.0-slim
  stage: test
  before_script: #it is a keyword that is used to define the commands that you think should run before each job
    - pip3 install flake8==4.0.1
    - pip3 install flake8-html==0.4.1 Jinja2==3.0
  script:
    - flake8 --format=html --htmldir=flake-report
  artifacts:
    when: always #this makes the artifacts available for us in any case (Success or failure)
    paths:
      - flake-report

# pytest:
#   image: python:3.8.0-slim
#   stage: test
#   before_script:
#     - pip install pytest-html
#     - pip install -r requirements.txt
#   script:
#     - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#   artifacts:
#     when: always
#     paths:
#       - pytest_reports/

build:
  image: docker:latest
  services:
    - docker:dind #twe need this command because we would be logging in and pulling the Docker image from Gitlab container district, so to enalble the docker commands
  #in this case, every job, we need to use "docker:dind"
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY #this is the address of Gitlab container registry
  script:
    - docker build -t $IMAGE_TAG .
    - docker images #for logging purposes, list the new image
    - docker push $IMAGE_TAG


deploy_stage:
  image: docker:latest
  services:
    - docker:dind #twe need this command because we would be logging in and pulling the Docker image from Gitlab container district, so to enalble the docker commands
  #in this case, every job, we need to use "docker:dind"
  stage: deploy staging
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY #this is the address of Gitlab container registry
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU_STAGING  # to push a Docker to Heroku container registry, we need first to tag it with a Heroku naming template
    - docker login -u _ -p $HEROKU_STAGING_API_KEY registry.heroku.com
    - docker push $HEROKU_STAGING
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_STAGING_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $STAGING_APP
    - echo "App deployed to staging server at htpps://$STAGING_APP.herokuapp.com/"

test_stage:
  image: alpine
  stage: automated testing
  before_script:
    - apk --no-cache add curl
  script:
    - curl https://$STAGING_APP.herokuapp.com/ | grep "Employee Data"
    

deploy_production:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy production
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY #this is the address of Gitlab container registry
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU_PRODUCTION  # to push a Docker to Heroku container registry, we need first to tag it with a Heroku naming template
    - docker login -u _ -p $HEROKU_PRODUCTION_API_KEY registry.heroku.com
    - docker push $HEROKU_PRODUCTION
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_PRODUCTION_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $PRODUCTION_APP
    - echo "App deployed to staging server at htpps://$PRODUCTION_APP.herokuapp.com/"
  only: #This command tells the production enviroment can only run in the main("master") branch
    - main
